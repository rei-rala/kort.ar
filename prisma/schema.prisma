datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique @default(cuid())
  email         String    @unique @db.String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  hitCount      Int       @default(0)

  public        Boolean        @default(false)
  redirectLinks RedirectLink[]
  hits          Hit[] // One-to-Many relation with Hit model (one User can have many Hits)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  flaggedAt DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model RedirectLink {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String @db.String
  owner     User   @relation(fields: [userEmail], references: [email], onDelete: NoAction)

  alias              String
  from               String  @unique
  to                 String
  icon               String
  color              String
  canReturnToProfile Boolean @default(false)
  active             Boolean @default(true)
  hitCount           Int     @default(0)
  public             Boolean @default(false)

  flaggedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  hits      Hit[] // One-to-Many relation with Hit model (one RedirectLink can have many Hits)
}

//TODO AÃ±adir un "SELF-COUNT" a HIT que obtenga el hitcount de redirectLink o de user segun corresponda
model Hit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  ip        String?
  userAgent String?
  referer   String?

  visitedUserId String? @db.ObjectId //  refiere al id del perfil visitado
  originalFrom  String? // refiere a la URL original de donde se hizo el click
  originalTo    String? // refiere a la URL original de destino

  visitingUserEmail     String?       @db.String
  user                  User?         @relation(fields: [visitingUserEmail], references: [email], onDelete: SetNull) // One-to-Many relation with User model (one User can be logged in multiple Hits)
  visitedRedirectLinkId String?       @db.ObjectId
  visitedRedirectLink   RedirectLink? @relation(fields: [visitedRedirectLinkId], references: [id], onDelete: SetNull) // Many-to-Many relation with RedirectLink model (one Hit can belong to many RedirectLinks)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
