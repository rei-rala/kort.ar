generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique @db.String
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  accounts      Account[]
  redirectLinks RedirectLink[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userEmail         String  @db.String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RedirectLink {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String @db.String
  owner     User   @relation(fields: [userEmail], references: [email], onDelete: NoAction)

  alias              String
  from               String  @unique // Este sera autogenerado en caso de vacio, debe ser unico
  to                 String
  icon               String
  color              String
  canReturnToProfile Boolean @default(false)
  active             Boolean @default(true)
  hitCount           Int     @default(0)
  public             Boolean @default(false)

  flaggedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Hit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String?  @db.String
  date      DateTime @default(now())
  ip        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
